import type { GetServerSideProps, NextPage } from 'next'
import { useRouter } from 'next/dist/client/router'
import Head from 'next/head'
import Image from 'next/image'
import { useState } from 'react'
import Swal from 'sweetalert2'
import ModalForm from '../components/modal'
import { Status } from '../models/enum/status'
import { Raffle } from '../models/raffle'
import { getRaffles, saveRaffles } from '../utils/raffle'

interface HomeInterface {
  data: Status[];
}

const Home = (props: HomeInterface) => {

  const [data, setData] = useState<Status[]>(props.data);
  const [select, setSelect] = useState<Raffle>({ numbers: [] });
  const [modalIsOpen, setIsOpen] = useState(false);
  const [isLoading, setLoading] = useState(false);
  const router = useRouter()

  function closeModal() {
    setIsOpen(false);
  }

  const save = async ({ name, email }: any) => {
    if (select.numbers.length == 0) {
      return Swal.fire(
        'Algo deu errado',
        'Você deve selecionar um número antes!',
        'error'
      )
    }
    select.email = email;
    select.name = name;
    select.status = Status.reserved;
    try {
      setLoading(true);
      await saveRaffles(select);
      router.push('/obrigado')
    } catch (error) {
      return Swal.fire(
        'Algo deu errado',
        `${error ?? ''}`,
        'error'
      )
    } finally {
      setLoading(false);
    }
  }

  return (
    <div className='container'>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='main'>
        <div className='numbers'>

          {
            data.map((number, index) => {
              return (
                <div
                  key={Math.random()}
                  className={
                    `number ${number} ${select?.numbers.find(item => item == index + 1) && 'selected'}`
                  }
                  onClick={() => {
                    let se = select;
                    const indexx = select?.numbers.findIndex(item => item == index + 1);
                    console.log(select?.numbers.find(item => item == index + 1))
                    if (number == Status.available && indexx == -1) {

                      setSelect({ ...select, numbers: [...select!.numbers, index + 1] });
                    }
                    if (indexx != -1) {
                      se?.numbers.splice(indexx ?? 0, 1);
                      setSelect({ ...se });
                    }

                  }}
                >
                  {index + 1}
                </div>
              )
            })
          }

        </div>

        <div className='select'>
          <div >
            <p>Total</p>
            <p><strong>R$ {select!.numbers.length * 10},00</strong></p>
          </div>
          <button
            onClick={() => {
              if (!select.numbers.length) {
                return Swal.fire(
                  'Algo deu errado',
                  'Você deve selecionar um número antes!',
                  'error'
                )
              }
              setIsOpen(true)
            }}
          >Reservar</button>
        </div>

      </main>
      <ModalForm
        modalIsOpen={modalIsOpen}
        isLoading={isLoading}
        closeModal={() => {

          closeModal()
        }}
        save={({ name, email }: any) => save({ name, email })}
      />
      <footer className={'footer'}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={'logo'}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

export default Home;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const numbers = Array.from(Array(100).keys());
  const arrays: Status[] = [];

  const raffles = async () => {
    const result: Raffle[] = await getRaffles();
    result.forEach(element => {
      element.numbers.forEach(number => {
        arrays[number - 1] = element.status!;
      })
    });
    numbers.forEach((item, index) => {
      arrays[index] = arrays[index] ?? Status.available;
    })
  }

  await raffles();

  return {
    props: {
      data: arrays
    }
  }

}
